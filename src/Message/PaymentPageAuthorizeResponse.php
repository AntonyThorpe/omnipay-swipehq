<?php

namespace Omnipay\Swipehq\Message;

use Omnipay\Common\Message\AbstractResponse;
use Omnipay\Common\Message\RedirectResponseInterface;

/**
 * Payment Page Authorize Response
 *
 * Process the response from Authorize Request.  Response example {"response_code":200,"message":"OK","data":{"identifier":"XXXX"}}
 */


class PaymentPageAuthorizeResponse extends AbstractResponse implements RedirectResponseInterface {

    protected $endpoint = 'https://payment.swipehq.com';

    /**
     * Get a message generated by the payment gateway
     *
     * @return string Message
     */
    public function getMessage(){
        return isset($this->data['message']) ? (string) $this->data['message'] : null;
    }


    /**
     * Response code
     *
     * @return string A response code from the payment gateway
     */
    public function getCode(){
        return isset($this->data['response_code']) ? (string) $this->data['response_code'] : null;
    }


    /**
     * Gateway Reference
     *
     * @return string A reference provided by the gateway to represent this transaction
     */
    public function getTransactionReference(){
        $data = $this->data['data'];
        
        if(empty($data['identifier'])){
            return null;
        } else {
            return $data['identifier'];
        }

    }


    /**
     * Is the response successful?
     *
     * As we need to redirect the browser we return false (the transaction is not yet complete)
     * @return boolean
     */
    public function isSuccessful(){
        return false;
    }


    /**
     * Does the response require a redirect?
     *
     * @return boolean
     */
    // isRedirected to offsite payment gateway to process the credit card
    public function isRedirect(){
        return true;
    }


    /**
     * Gets the redirect target url
     *
     * Example: https://payment.swipehq.com/?identifier_id=XXXX
     * @ return url
     */
    public function getRedirectUrl(){
        return $this->endpoint . '/?' . http_build_query($this->getRedirectData());
    }


    /**
     * Get the required redirect method (either GET or POST).
     *
     * @return string
     */
    public function getRedirectMethod(){
        return 'GET';
    }


    /**
     * Gets the redirect form data array, if the redirect method is POST
     *
     * @ return array
     */
    public function getRedirectData(){
        return array('identifier_id' => $this->getTransactionReference());
    }

    
}
